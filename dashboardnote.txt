git add .
git commit -m "Pre directory redesign"
git push origin main

ls -R src/

ls -R

ls -R ap/

ls -R src/app/features/auth/auth

ls -R amplify/auth

ls -R src/app/layouts

amplify gen2 install

Pre:
remove all depencies

mkdir -p amplify/auth amplify/data amplify/storage


instal gen2 

npm install --save-dev @aws-amplify/backend@latest @aws-amplify/backend-cli@latest typescript
npm install aws-amplify @aws-amplify/ui-angular

add content to files

cat > amplify/package.json <<EOF
{
  "type": "module"
}
EOF


cat > amplify/tsconfig.json <<EOF
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["**/*.ts"]
}
EOF

cat > amplify/backend.ts <<EOF
import { defineBackend } from '@aws-amplify/backend';
import { auth } from './auth/resource';
import { data } from './data/resource';
import { storage } from './storage/resource';

defineBackend({ auth, data, storage });
EOF

cat > amplify/auth/resource.ts <<EOF
import { defineAuth } from '@aws-amplify/backend';

export const auth = defineAuth({
  loginWith: {
    email: true
  }
});
EOF

cat > amplify/data/resource.ts <<EOF
import { a, defineData, type ClientSchema } from '@aws-amplify/backend';

const schema = a.schema({
  UserSettings: a.model({
    theme: a.string().default('light'),
    preferences: a.json(),
    profilePictureKey: a.string()
  }).authorization(allow => [allow.owner()])
});

export type Schema = ClientSchema<typeof schema>;

export const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: 'userPool'
  }
});
EOF

cat > amplify/storage/resource.ts <<EOF
import { defineStorage } from '@aws-amplify/backend';

export const storage = defineStorage({
  name: 'adminDashboardDrive',
  access: (allow) => ({
    'private/{entity_id}/*': [
      allow.entity('identity').to(['read', 'write', 'delete'])
    ],
    'public/*': [
      allow.guest.to(['read'])
    ]
  })
});
EOF

final deployment q` ÷

npm install
npx ampx sandbox delete --profile amplify-admin
npx ampx sandbox --profile amplify-admin --outputs-out-dir . --debug


trouble shooting
rm -rf node_modules/.cache
rm -rf .amplify

rm -rf node_modules
rm -rf .amplify
rm -rf package-lock.json
rm -rf node_modules/.cache

rm -rf node_modules
rm -rf .amplify
rm -rf amplify/node_modules
rm -rf amplify/.cache
rm -rf amplify_outputs.*
rm -rf amplify/package-lock.json

rm -rf node_modules .amplify amplify/node_modules amplify/.cache amplify/package-lock.json amplify_outputs.*



Confirming All Connections Post-Fix

Local Test: Run ng serve—app should load /auth for unauth users (authenticator forms). 

Check browser console for Amplify.getConfig() output matching amplify_outputs.json.
Sandbox Validation: Run npx ampx sandbox --logs—watch for successful synth/deploy (no errors). 
Test auth: import { signUp } from 'aws-amplify/auth'; 
await signUp({ username: 'test@email.com', password: 'Pass123!' }); 
in console (Gen 2 Auth API).
Deployment Success: After push/redeploy, 
verify in Console: green build status, 
app URL loads (e.g., https://main.d2s31a2let3c7r.amplifyapp.com). 
Use AWS CLI for deeper check: aws amplify list-apps (shows app ID), 
aws amplify get-app --app-id d2s31a2let3c7r (confirms backend env).