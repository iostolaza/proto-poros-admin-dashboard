
You are a Staff Fullstack Engineer expert in;

 **Python**, **TypeScript**, **Angular**, **Tailwind*, **AWS** (especially AWS Amplify), 
 **VS code**, **GitHub**, and **datastructures**. 
 
You write maintainable, performant, and scalable code following the latest best practices and standards.


2. **Deep Research**: Scan official docs, forums (StackOverflow, GitHub Issues), Medium, Reddit, and credible blogs to understand Angular.

- Prioritize clean architecture, modular design, and testability.  
- Cite docs (official AWS, Angular) and community solutions (StackOverflow, GitHub).
- Use TypeScript + Angular v20+ syntax.
- Use Amplify Gen2 code-first where applicable.
- Use `cat << 'EOF' >  command to generate a complete script answers.

- Ask clarifying questions BEFORE drafting.

## TypeScript Best Practices
- Use strict type checking
- Prefer type inference when the type is obvious
- Avoid the `any` type; use `unknown` when type is uncertain
## Angular Best Practices
- Always use standalone components over NgModules
- Do NOT set `standalone: true` inside the `@Component`, `@Directive` and `@Pipe` decorators
- Use signals for state management
- Implement lazy loading for feature routes
- Use `NgOptimizedImage` for all static images.
- Do NOT use the `@HostBinding` and `@HostListener` decorators. Put host bindings inside the `host` object of the `@Component` or `@Directive` decorator instead
## Components
- Keep components small and focused on a single responsibility
- Use `input()` and `output()` functions instead of decorators
- Use `computed()` for derived state
- Set `changeDetection: ChangeDetectionStrategy.OnPush` in `@Component` decorator
- Prefer inline templates for small components
- Prefer Reactive forms instead of Template-driven ones
- Do NOT use `ngClass`, use `class` bindings instead
- DO NOT use `ngStyle`, use `style` bindings instead
## State Management
- Use signals for local component state
- Use `computed()` for derived state
- Keep state transformations pure and predictable
- Do NOT use `mutate` on signals, use `update` or `set` instead
## Templates
- Keep templates simple and avoid complex logic
- Use native control flow (`@if`, `@for`, `@switch`) instead of `*ngIf`, `*ngFor`, `*ngSwitch`
- Use the async pipe to handle observables
## Services
- Design services around a single responsibility
- Use the `providedIn: 'root'` option for singleton services
- Use the `inject()` function instead of constructor injection

I want to style this dashboard with the below insstuctions. 
We are using angular, and Tailwind. 

We have a header:
In the header bar, the title should be on the left.
The user profile image on the right. 
The user profile image should have a dropdown on click,
the dropdown should illustrate user profile, settings, and logout. 
The left side of the header will allow the side nav to expand and collapse when cicking the title. 


We have a side nav.
The side nav should be able to expand and collapse. 
When collapsed, there should be icons for the navigation.
When expanded, there should be the icons, and the menu. 

  navLinks = [
    { path: '/dashboard', label: 'Dashboard', icon: 'assets/icons/dashboard.svg' },
    { path: '/messages', label: 'Messages', icon: 'assets/icons/messages.svg' },
    { path: '/profile', label: 'Profile', icon: 'assets/icons/profile.svg' },
    { path: '/settings', label: 'Settings', icon: 'assets/icons/settings.svg' },
    { path: '/analytics', label: 'Analytics', icon: 'assets/icons/analytics.svg' },
    { path: '/timesheet', label: 'Timesheet', icon: 'assets/icons/timesheet.svg' },
    { path: '/schedule', label: 'Schedule', icon: 'assets/icons/schedule.svg' },
    { path: '/calendar', label: 'Calendar', icon: 'assets/icons/calendar.svg' },
    { path: '/contacts', label: 'Contacts', icon: 'assets/icons/contacts.svg' },
  ];

We have a footer,
footer should be like this;
<footer class="tailwind style">
  <p>Â© 2025 Proto-Admin. All rights reserved.</p>
</footer>

We will have the main part of the layout. 
this is where the main content will be. 
When we click on, messages or the profile, the information from messages will display.
the main part will be below the header, to the right of the side nav and above the footer.


Angular Tailwind directory and script we want to take inspiration from. 

franciscoostolaza@Mac protos-angular-tailwind % ls
angular.json            karma.conf.js           package-lock.json       README.md               tsconfig.app.json
CHANGELOG.md            LICENSE                 package.json            src                     tsconfig.json
CONTRIBUTING.md         node_modules            playwright.config.ts    tests-e2e               tsconfig.spec.json
franciscoostolaza@Mac protos-angular-tailwind % 

franciscoostolaza@Mac protos-angular-tailwind % ls -R src/app/modules/layout
components                      layout.component.css            layout.component.spec.ts        layout.module.ts
layout-routing.module.ts        layout.component.html           layout.component.ts             services

src/app/modules/layout/components:
bottom-navbar   footer          navbar          sidebar

src/app/modules/layout/components/bottom-navbar:
bottom-navbar.component.css     bottom-navbar.component.html    bottom-navbar.component.spec.ts bottom-navbar.component.ts

src/app/modules/layout/components/footer:
footer.component.css            footer.component.html           footer.component.spec.ts        footer.component.ts

src/app/modules/layout/components/navbar:
navbar-menu                     navbar-submenu                  navbar.component.html           navbar.component.ts
navbar-mobile                   navbar.component.css            navbar.component.spec.ts        profile-menu

src/app/modules/layout/components/navbar/navbar-menu:
navbar-menu.component.css       navbar-menu.component.html      navbar-menu.component.spec.ts   navbar-menu.component.ts

src/app/modules/layout/components/navbar/navbar-mobile:
navbar-mobile-menu              navbar-mobile.component.css     navbar-mobile.component.spec.ts
navbar-mobile-submenu           navbar-mobile.component.html    navbar-mobilecomponent.ts

src/app/modules/layout/components/navbar/navbar-mobile/navbar-mobile-menu:
navbar-mobile-menu.component.css        navbar-mobile-menu.component.spec.ts
navbar-mobile-menu.component.html       navbar-mobile-menu.component.ts

src/app/modules/layout/components/navbar/navbar-mobile/navbar-mobile-submenu:
navbar-mobile-submenu.component.css     navbar-mobile-submenu.component.spec.ts
navbar-mobile-submenu.component.html    navbar-mobile-submenu.component.ts

src/app/modules/layout/components/navbar/navbar-submenu:
navbar-submenu.component.css            navbar-submenu.component.spec.ts
navbar-submenu.component.html           navbar-submenu.component.ts

src/app/modules/layout/components/navbar/profile-menu:
profile-menu.component.css      profile-menu.component.html     profile-menu.component.spec.ts  profile-menu.component.ts

src/app/modules/layout/components/sidebar:
sidebar-menu                    sidebar.component.css           sidebar.component.spec.ts
sidebar-submenu                 sidebar.component.html          sidebar.component.ts

src/app/modules/layout/components/sidebar/sidebar-menu:
sidebar-menu.component.css      sidebar-menu.component.html     sidebar-menu.component.spec.ts  sidebar-menu.component.ts

src/app/modules/layout/components/sidebar/sidebar-submenu:
sidebar-submenu.component.css           sidebar-submenu.component.spec.ts
sidebar-submenu.component.html          sidebar-submenu.component.ts

src/app/modules/layout/services:
menu.service.spec.ts    menu.service.ts
franciscoostolaza@Mac protos-angular-tailwind % 


<nav
  [ngClass]="menuService.showSideBar ? 'w-[210px] xl:w-[280px]' : 'w-[70px]'"
  class="bg-background hidden h-full flex-col justify-between pt-3 transition-all duration-300 lg:flex">
  <div class="overflow-hidden">
    <!-- Logo -->
    <div
      [ngClass]="menuService.showSideBar ? 'justify-between' : 'justify-center'"
      class="mx-4 mb-2 flex h-9 items-center">
      <div class="flex items-center" *ngIf="menuService.showSideBar">
        <a
          (click)="toggleSidebar()"
          class="bg-primary flex cursor-pointer items-center justify-center rounded-sm p-2 focus:outline-hidden focus:ring-1">
          <svg-icon src="assets/icons/logo.svg"> </svg-icon>
        </a>
        <b class="text-foreground ps-2 ml-1 grow text-sm font-bold">
          {{ appJson.displayName }}
        </b>
      </div>
      <button
        (click)="toggleSidebar()"
        class="text-muted-foreground/50 hover:text-muted-foreground flex items-center justify-center rounded-md p-2 transition-all duration-200 focus:outline-hidden"
        [ngClass]="{ 'rotate-180': !menuService.showSideBar }">
        <svg-icon src="assets/icons/heroicons/solid/chevron-double-left.svg"> </svg-icon>
      </button>
    </div>

    <!-- Menu Items -->
    <div
      class="scrollbar-thumb--sm scrollbar-track-rounded scrollbar-thin scrollbar-track-transparent scrollbar-thumb-card h-full overflow-auto px-4">
      <app-sidebar-menu></app-sidebar-menu>
    </div>
  </div>

  <div class="mx-4 my-4 space-y-1">
    <!-- Version -->
    <a
      target="_blank"
      href="https://github.com/luciano-work/angular-tailwind"
      class="-sm hover:bg-card group flex h-9 cursor-pointer items-center justify-start p-2">
      <svg-icon
        src="assets/icons/heroicons/outline/information-circle.svg"
        [svgClass]="'h-5 w-5 text-muted-foreground/50'">
      </svg-icon>

      <div class="ml-3 truncate text-[10px] font-semibold tracking-wide focus:outline-hidden">
        <span class="bg-primary/10 text-primary px-2 font-semibold">v{{ appJson.version }}</span>
      </div>

      <div class="fixed w-full" *ngIf="!menuService.showSideBar">
        <span
          class="z-1 bg-foreground text-background absolute left-12 -top-4 w-auto min-w-max origin-left scale-0 p-2 text-xs font-bold shadow-md transition-all duration-200 group-hover:scale-100">
          v{{ appJson.version }}
        </span>
      </div>
    </a>
  </div>
</nav>
import { NgClass, NgIf } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { AngularSvgIconModule } from 'angular-svg-icon';
import packageJson from '../../../../../../package.json';
import { MenuService } from '../../services/menu.service';
import { SidebarMenuComponent } from './sidebar-menu/sidebar-menu.component';

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css'],
  imports: [NgClass, NgIf, AngularSvgIconModule, SidebarMenuComponent],
})
export class SidebarComponent implements OnInit {
  public appJson: any = packageJson;

  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleSidebar() {
    this.menuService.toggleSidebar();
  }
}
import { NgClass, NgFor, NgTemplateOutlet } from '@angular/common';
import { Component, Input, OnInit } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from '../../../services/menu.service';

@Component({
  selector: 'app-sidebar-submenu',
  templateUrl: './sidebar-submenu.component.html',
  styleUrls: ['./sidebar-submenu.component.css'],
  imports: [NgClass, NgFor, NgTemplateOutlet, RouterLinkActive, RouterLink, AngularSvgIconModule],
})
export class SidebarSubmenuComponent implements OnInit {
  @Input() public submenu = <SubMenuItem>{};

  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleMenu(menu: any) {
    this.menuService.toggleSubMenu(menu);
  }

  private collapse(items: Array<any>) {
    items.forEach((item) => {
      item.expanded = false;
      if (item.children) this.collapse(item.children);
    });
  }
}
<div
  class="max-h-0 overflow-hidden pt-1 transition-all duration-500 ltr:pl-4 rtl:pr-4"
  [ngClass]="{ hidden: !menuService.showSideBar, 'max-h-screen': submenu.expanded }">
  <ul
    class="border-border text-muted-foreground flex flex-col border-dashed ltr:border-l ltr:pl-2 rtl:border-r rtl:pr-2">
    <li *ngFor="let sub of submenu.children">
      <div class="text-muted-foreground hover:text-primary relative flex" (click)="toggleMenu(sub)">
        <!-- Condition -->
        <ng-container
          [ngTemplateOutlet]="sub.children ? childMenu : parentMenu"
          [ngTemplateOutletContext]="{ sub: sub }">
        </ng-container>

        <!-- Parent Menu -->
        <ng-template #parentMenu let-sub="sub">
          <a
            [routerLink]="sub.route"
            routerLinkActive="text-primary"
            [routerLinkActiveOptions]="{ exact: true }"
            class="hover:bg-card inline-block w-full rounded-lg px-4 py-2 text-xs">
            {{ sub.label }}
          </a>
          @if(menuService.isActive(sub.route)){
          <span
            class="size-1.5 bg-primary absolute flex translate-y-3.5 items-center rounded-full ltr:-translate-x-[11.5px] rtl:translate-x-[11.5px]">
          </span>
          }
        </ng-template>

        <!-- Child Menu -->
        <ng-template #childMenu let-sub="sub">
          <a class="inline-block w-full cursor-pointer px-4 py-2 text-xs">
            {{ sub.label }}
          </a>
          <button
            [ngClass]="{ hidden: !menuService.showSideBar }"
            class="text-foreground/50 flex cursor-pointer items-center justify-end px-2 transition-all duration-500">
            @if(!sub.expanded){
            <svg-icon src="assets/icons/heroicons/outline/plus.svg" svgClass="h-4 w-4"> </svg-icon>
            }@else {
            <svg-icon src="assets/icons/heroicons/outline/minus.svg" svgClass="h-4 w-4"> </svg-icon>
            }
          </button>
        </ng-template>
      </div>
      <!-- Submenu items -->
      @if(sub.children?.length){
      <app-sidebar-submenu [submenu]="sub"></app-sidebar-submenu>
      }
    </li>
  </ul>
</div>
import { NgClass, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from '../../../services/menu.service';
import { SidebarSubmenuComponent } from '../sidebar-submenu/sidebar-submenu.component';

@Component({
  selector: 'app-sidebar-menu',
  templateUrl: './sidebar-menu.component.html',
  styleUrls: ['./sidebar-menu.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  imports: [
    NgFor,
    NgClass,
    AngularSvgIconModule,
    NgTemplateOutlet,
    RouterLink,
    RouterLinkActive,
    NgIf,
    SidebarSubmenuComponent,
  ],
})
export class SidebarMenuComponent implements OnInit {
  constructor(public menuService: MenuService) {}

  public toggleMenu(subMenu: SubMenuItem) {
    this.menuService.toggleMenu(subMenu);
  }

  ngOnInit(): void {}
}
<div *ngFor="let menu of menuService.pagesMenu">
  <div *ngIf="menuService.showSideBar" class="mx-1 flex items-center justify-between py-3">
    <small [ngClass]="{ hidden: !menuService.showSideBar }" class="text-muted-foreground/50 text-xs font-semibold">
      {{ menu.group }}
    </small>
  </div>
  <ul class="flex flex-col">
    <!-- List items -->
    <li *ngFor="let item of menu.items">
      <!-- Menu List -->
      <div
        (click)="toggleMenu(item)"
        [ngClass]="{
          'hover:bg-primary/10': !menuService.showSideBar && item.active,
          'hover:bg-card/50': !menuService.showSideBar
        }"
        class="text-muted-foreground hover:text-foreground group relative flex grow items-center gap-4 rounded-lg px-2">
        <!-- Icon -->
        <div [ngClass]="item.active && !menuService.showSideBar ? 'text-primary' : 'text-muted-foreground/50'">
          <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5'"> </svg-icon>
        </div>

        <!-- Condition -->
        <ng-container
          [ngTemplateOutlet]="item.children ? childMenu : parentMenu"
          [ngTemplateOutletContext]="{ item: item }">
        </ng-container>

        <!-- Workaround:: Enable routerLink -->
        <ng-template #parentMenu let-item="item">
          <div
            routerLink="{{ item.route }}"
            class="text-muted-foreground hover:text-primary flex h-[36px] cursor-pointer items-center justify-start rounded-sm">
            <a
              [ngClass]="{ hidden: !menuService.showSideBar }"
              routerLinkActive="text-primary"
              class="truncate text-xs font-semibold tracking-wide focus:outline-hidden">
              {{ item.label }}
            </a>
          </div>
        </ng-template>

        <!-- Workaround:: Disable routerLink -->
        <ng-template #childMenu let-item="item">
          <div class="flex h-9 grow cursor-pointer items-center justify-start rounded-sm">
            <a
              [ngClass]="{ hidden: !menuService.showSideBar }"
              class="text-muted-foreground group-hover:text-primary truncate text-xs font-semibold tracking-wide focus:outline-hidden">
              {{ item.label }}
            </a>
          </div>
        </ng-template>

        <!-- Arrow Icon -->
        <button
          *ngIf="item.children"
          [ngClass]="{ hidden: !menuService.showSideBar }"
          class="text-foreground/50 flex cursor-pointer items-center justify-end p-0 transition-all duration-500 ltr:right-0 rtl:left-0">
          @if(!item.expanded){
          <svg-icon src="assets/icons/heroicons/outline/plus.svg" svgClass="h-4 w-4"> </svg-icon>
          }@else {
          <svg-icon src="assets/icons/heroicons/outline/minus.svg" svgClass="h-4 w-4"> </svg-icon>
          }
        </button>

        <!-- Tooltip -->
        <div class="z-1 fixed h-[36px]" *ngIf="!menuService.showSideBar">
          <span
            class="z-1 bg-foreground text-background absolute w-auto min-w-max translate-y-[2px] scale-0 rounded-md p-2 text-xs font-bold shadow-md transition-all duration-200 group-hover:scale-100 ltr:origin-left ltr:translate-x-10 rtl:origin-right rtl:-translate-x-10">
            {{ item.label }}
          </span>
        </div>
      </div>

      <!-- Submenu items -->
      <app-sidebar-submenu [submenu]="item"></app-sidebar-submenu>
    </li>
  </ul>

  <div class="py-3" *ngIf="menu.separator">
    <hr class="border-border border-dashed" />
  </div>
</div>
<div class="bg-background relative">
  <div class="mx-auto px-5">
    <div class="flex items-center justify-between py-3.5 md:justify-start">
      <!-- Mobile Navigation Menu Button-->
      <div class="sm:order-1 md:hidden">
        <button
          (click)="toggleMobileMenu()"
          type="button"
          class="bg-muted text-muted-foreground focus:ring-primary hover:bg-muted-foreground hover:text-muted inline-flex items-center justify-center rounded-md p-2 focus:outline-hidden focus:ring-2 focus:ring-inset"
          aria-expanded="false">
          <span class="sr-only">Open menu</span>
          <!-- Heroicon name: outline/menu -->
          <svg-icon src="assets/icons/heroicons/outline/menu.svg" [svgClass]="'h-6 w-6'"> </svg-icon>
        </button>
      </div>

      <!-- Logo -->
      <div class="flex items-center justify-start gap-3 sm:order-2 ltr:md:mr-10 rtl:md:ml-10 lg:hidden">
        <a class="bg-primary flex items-center justify-center rounded-sm p-2 focus:outline-hidden focus:ring-1">
          <svg-icon src="assets/icons/logo.svg"></svg-icon>
        </a>
        <b class="text-foreground hidden text-sm font-bold sm:block"> Angular Tailwind </b>
      </div>

      <!-- Desktop Menu -->
      <div class="hidden space-x-10 sm:order-3 md:flex">
        <app-navbar-menu></app-navbar-menu>
      </div>

      <!-- Profile menu -->
      <div class="items-center justify-end sm:order-4 md:flex md:flex-1 lg:w-0">
        <app-profile-menu></app-profile-menu>
      </div>
    </div>
  </div>
  <!-- Mobile menu -->
  <app-navbar-mobile></app-navbar-mobile>
</div>
import { Component, OnInit } from '@angular/core';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { MenuService } from '../../services/menu.service';
import { NavbarMenuComponent } from './navbar-menu/navbar-menu.component';
import { NavbarMobileComponent } from './navbar-mobile/navbar-mobilecomponent';
import { ProfileMenuComponent } from './profile-menu/profile-menu.component';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css'],
  imports: [AngularSvgIconModule, NavbarMenuComponent, ProfileMenuComponent, NavbarMobileComponent],
})
export class NavbarComponent implements OnInit {
  constructor(private menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleMobileMenu(): void {
    this.menuService.showMobileMenu = true;
  }
}
import { animate, state, style, transition, trigger } from '@angular/animations';
import { NgClass } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { RouterLink } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { ThemeService } from '../../../../../core/services/theme.service';
import { ClickOutsideDirective } from '../../../../../shared/directives/click-outside.directive';

@Component({
  selector: 'app-profile-menu',
  templateUrl: './profile-menu.component.html',
  styleUrls: ['./profile-menu.component.css'],
  imports: [ClickOutsideDirective, NgClass, RouterLink, AngularSvgIconModule],
  animations: [
    trigger('openClose', [
      state(
        'open',
        style({
          opacity: 1,
          transform: 'translateY(0)',
          visibility: 'visible',
        }),
      ),
      state(
        'closed',
        style({
          opacity: 0,
          transform: 'translateY(-20px)',
          visibility: 'hidden',
        }),
      ),
      transition('open => closed', [animate('0.2s')]),
      transition('closed => open', [animate('0.2s')]),
    ]),
  ],
})
export class ProfileMenuComponent implements OnInit {
  public isOpen = false;
  public profileMenu = [
    {
      title: 'Your Profile',
      icon: './assets/icons/heroicons/outline/user-circle.svg',
      link: '/profile',
    },
    {
      title: 'Settings',
      icon: './assets/icons/heroicons/outline/cog-6-tooth.svg',
      link: '/settings',
    },
    {
      title: 'Log out',
      icon: './assets/icons/heroicons/outline/logout.svg',
      link: '/auth',
    },
  ];

  public themeColors = [
    {
      name: 'base',
      code: '#e11d48',
    },
    {
      name: 'yellow',
      code: '#f59e0b',
    },
    {
      name: 'green',
      code: '#22c55e',
    },
    {
      name: 'blue',
      code: '#3b82f6',
    },
    {
      name: 'orange',
      code: '#ea580c',
    },
    {
      name: 'red',
      code: '#cc0022',
    },
    {
      name: 'violet',
      code: '#6d28d9',
    },
  ];

  public themeMode = ['light', 'dark'];
  public themeDirection = ['ltr', 'rtl'];

  constructor(public themeService: ThemeService) {}

  ngOnInit(): void {}

  public toggleMenu(): void {
    this.isOpen = !this.isOpen;
  }

  toggleThemeMode() {
    this.themeService.theme.update((theme) => {
      const mode = !this.themeService.isDark ? 'dark' : 'light';
      return { ...theme, mode: mode };
    });
  }

  toggleThemeColor(color: string) {
    this.themeService.theme.update((theme) => {
      return { ...theme, color: color };
    });
  }

  setDirection(value: string) {
    this.themeService.theme.update((theme) => {
      return { ...theme, direction: value };
    });
  }
}
<div class="relative ml-3">
  <!-- Profile Button -->
  <button (click)="toggleMenu()" class="bg-card relative flex rounded-full text-sm" type="button">
    <span class="sr-only">Open user menu</span>
    <img
      clickOutside
      (clickOutside)="isOpen = false"
      class="size-9 shrink-0 rounded-md"
      src="https://avatars.githubusercontent.com/u/12519008?v=4"
      alt="" />
  </button>
  <!-- Dropdown -->
  <div
    [@openClose]="isOpen ? 'open' : 'closed'"
    class="bg-background shadow-custom border-muted absolute z-20 mt-2 w-60 origin-top-right transform rounded-md border border-dashed py-4 ring-1 ring-transparent ring-opacity-5 transition focus:outline-hidden ltr:right-0 rtl:left-0">
    <div class="flext-row flex items-center px-4 pb-4">
      <div class="w-10 shrink-0">
        <img class="rounded-md" src="https://avatars.githubusercontent.com/u/12519008?v=4" alt="" />
      </div>
      <div class="text-foreground overflow-hidden px-2 text-sm font-semibold">
        Luciano Oliveira
        <p class="text-muted-foreground truncate text-ellipsis text-xs font-semibold">me&#64;lanno.dev</p>
      </div>
    </div>

    <div class="border-border border-b border-dashed"></div>

    <ul class="my-2 mx-2 flex flex-col">
      @for (item of profileMenu; track $index) {
      <li
        routerLink="{{ item.link }}"
        :key="$index"
        class="text-muted-foreground hover:bg-card hover:text-primary inline-flex cursor-pointer items-center gap-2 rounded-md px-2 py-2 text-xs font-semibold">
        <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5 text-muted-foreground/50'"> </svg-icon>
        {{ item.title }}
      </li>
      }
    </ul>
    <hr class="border-border border-dashed" />
    <div class="mx-4 my-2">
      <span class="text-foreground text-xs font-semibold">Color</span>
      <div class="mt-2 grid grid-cols-2 gap-2">
        @for (item of themeColors; track $index) {
        <div
          :key="$index"
          (click)="toggleThemeColor(item.name)"
          [ngClass]="{ 'border-muted-foreground/30 bg-card': item.name == themeService.theme().color }"
          class="focus-visible:ring-ring border-border bg-background text-muted-foreground hover:bg-card hover:text-foreground shadow-xs inline-flex h-8 cursor-pointer items-center justify-start space-x-2 whitespace-nowrap rounded-md border border-dashed px-3 text-xs font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50">
          <span
            [style.backgroundColor]="item.code"
            class="flex h-5 w-5 shrink-0 items-center justify-center rounded-full"></span>
          <p class="capitalize">{{ item.name }}</p>
        </div>
        }
      </div>
    </div>
    <div class="mx-4 my-2">
      <span class="text-foreground text-xs font-semibold">Mode</span>
      <div class="mt-2 grid grid-cols-2 gap-2">
        @for (item of themeMode; track $index) {
        <div
          :key="$index"
          (click)="toggleThemeMode()"
          [ngClass]="{ 'border-muted-foreground/30 bg-card': item == themeService.theme().mode }"
          class="focus-visible:ring-ring border-border bg-background text-muted-foreground hover:bg-card hover:text-foreground shadow-xs inline-flex h-8 cursor-pointer items-center justify-start space-x-2 whitespace-nowrap rounded-md border border-dashed px-3 text-xs font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50">
          <svg-icon
            [src]="
              item == 'light' ? 'assets/icons/heroicons/outline/sun.svg' : 'assets/icons/heroicons/outline/moon.svg'
            "
            [svgClass]="'h-5 w-5 text-muted-foreground/50'">
          </svg-icon>
          <p class="capitalize">{{ item }}</p>
        </div>
        }
      </div>
    </div>
    <div class="mx-4 my-2">
      <span class="text-foreground text-xs font-semibold">Direction</span>
      <div class="mt-2 grid grid-cols-2 gap-2">
        @for (item of themeDirection; track $index) {
        <div
          :key="$index"
          (click)="setDirection(item)"
          [ngClass]="{ 'border-muted-foreground/30 bg-card': item == themeService.theme().direction }"
          class="focus-visible:ring-ring border-border bg-background text-muted-foreground hover:bg-card hover:text-foreground shadow-xs inline-flex h-8 cursor-pointer items-center justify-start space-x-2 whitespace-nowrap rounded-md border border-dashed px-3 text-xs font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50">
          <svg-icon
            [src]="
              item == 'ltr'
                ? 'assets/icons/tablericons/text-direction-ltr.svg'
                : 'assets/icons/tablericons/text-direction-rtl.svg'
            "
            [svgClass]="'h-5 w-5 text-muted-foreground/50'">
          </svg-icon>
          <p class="uppercase">{{ item }}</p>
        </div>
        }
      </div>
    </div>
  </div>
</div>
import { NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';

@Component({
  selector: 'div[navbar-submenu]',
  templateUrl: './navbar-submenu.component.html',
  styleUrls: ['./navbar-submenu.component.css'],
  imports: [NgFor, NgTemplateOutlet, RouterLinkActive, RouterLink, NgIf, AngularSvgIconModule],
})
export class NavbarSubmenuComponent implements OnInit {
  @Input() public submenu = <SubMenuItem[]>{};
  @ViewChild('submenuRef') submenuRef: ElementRef<HTMLDivElement> | undefined;

  constructor() {}

  ngOnInit(): void {}

  ngAfterViewInit() {
    /**
     * check if component is out of the screen
     */
    if (this.submenuRef) {
      const submenu = this.submenuRef.nativeElement.getBoundingClientRect();
      const bounding = document.body.getBoundingClientRect();

      if (submenu.right > bounding.right) {
        const childrenElement = this.submenuRef.nativeElement.parentNode as HTMLElement;
        if (childrenElement) {
          childrenElement.style.left = '-100%';
        }
      }
    }
  }
}
<ul #submenuRef class="bg-background shadow-custom mt-2 space-y-0.5 rounded-md py-3">
  <li class="flex font-semibold" *ngFor="let item of submenu">
    <!-- Condition -->
    <ng-container
      [ngTemplateOutlet]="item.children ? childMenu : parentMenu"
      [ngTemplateOutletContext]="{ item: item }">
    </ng-container>

    <!-- Parent Menu -->
    <ng-template #parentMenu let-item="item">
      <button
        [routerLink]="item.route"
        routerLinkActive="text-primary"
        [routerLinkActiveOptions]="{ exact: true }"
        class="text-muted-foreground hover:bg-card hover:text-foreground mx-3 flex w-full items-center justify-between rounded-md py-2 px-2 text-xs font-semibold">
        <div class="flex items-center justify-start">
          <span class="text-muted-foreground/50 ltr:mr-2 rtl:ml-2" *ngIf="item.icon">
            <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5'"> </svg-icon>
          </span>
          <span class="ml-1">{{ item.label }}</span>
        </div>
      </button>
    </ng-template>

    <!-- Child Menu -->
    <ng-template #childMenu let-item="item">
      <div class="dropdown relative flex w-full">
        <button
          class="text-muted-foreground hover:bg-card hover:text-foreground mx-3 flex w-full items-center justify-between rounded-md py-2 px-2 text-xs font-semibold">
          <div class="flex items-center justify-start">
            <span class="text-muted-foreground/50 ltr:mr-2 rtl:ml-2" *ngIf="item.icon">
              <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5'"> </svg-icon>
            </span>
            <span class="ml-1">{{ item.label }}</span>
          </div>
          <span class="rtl:rotate-180">
            <svg-icon
              src="assets/icons/heroicons/solid/chevron-right.svg"
              [svgClass]="'h-5 w-5 text-muted-foreground/50'">
            </svg-icon>
          </span>
        </button>
        <!-- Submenu Dropdown -->
        <div
          class="dropdown-content absolute top-0 min-w-[200px] ltr:left-[100%] ltr:origin-top-left rtl:right-[100%] rtl:origin-top-right"
          navbar-submenu
          [submenu]="item.children"></div>
      </div>
    </ng-template>
  </li>
</ul>
import { Component, OnInit } from '@angular/core';
import { MenuService } from '../../../services/menu.service';
import { NavbarMobileMenuComponent } from './navbar-mobile-menu/navbar-mobile-menu.component';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { NgClass } from '@angular/common';

@Component({
  selector: 'app-navbar-mobile',
  templateUrl: './navbar-mobile.component.html',
  styleUrls: ['./navbar-mobile.component.css'],
  imports: [NgClass, AngularSvgIconModule, NavbarMobileMenuComponent],
})
export class NavbarMobileComponent implements OnInit {
  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleMobileMenu(): void {
    this.menuService.showMobileMenu = false;
  }
}
<div
  [ngClass]="
    menuService.showMobileMenu
      ? 'animate-fade-in-up pointer-events-auto scale-100 opacity-100 duration-200'
      : 'pointer-events-none scale-95 opacity-0 duration-100 ease-out'
  "
  class="absolute inset-x-0 top-0 z-10 origin-top-right transform p-2 transition md:hidden">
  <div class="bg-background rounded-lg shadow-lg">
    <div class="pt-5 pb-6">
      <div class="flex items-center justify-between px-5">
        <div>
          <!-- Logo -->
          <div class="flex items-center justify-start gap-3 sm:order-2 md:mr-10 lg:hidden">
            <a class="bg-primary flex items-center justify-center rounded-sm p-2 focus:outline-hidden focus:ring-1">
              <svg-icon src="assets/icons/logo.svg"> </svg-icon>
            </a>
            <b class="text-foreground text-sm font-bold"> Angular Tailwind </b>
          </div>
        </div>
        <div class="-mr-2">
          <button
            (click)="toggleMobileMenu()"
            type="button"
            class="text-muted-foreground focus:ring-primary hover:bg-card hover:text-foreground inline-flex items-center justify-center rounded-md p-2 transition-transform hover:rotate-90 focus:outline-hidden focus:ring-2 focus:ring-inset">
            <span class="sr-only">Close menu</span>
            <svg-icon src="assets/icons/heroicons/outline/x.svg"> </svg-icon>
          </button>
        </div>
      </div>
      <div
        class="scrollbar-thumb-rounded scrollbar-track-rounded scrollbar-thin scrollbar-track-transparent scrollbar-thumb-muted max-h-[500px] overflow-y-auto px-5">
        <app-navbar-mobile-menu></app-navbar-mobile-menu>
      </div>
    </div>
  </div>
</div>
import { NgClass, NgFor, NgTemplateOutlet } from '@angular/common';
import { Component, Input, OnInit } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from 'src/app/modules/layout/services/menu.service';

@Component({
  selector: 'app-navbar-mobile-submenu',
  templateUrl: './navbar-mobile-submenu.component.html',
  styleUrls: ['./navbar-mobile-submenu.component.css'],
  imports: [NgClass, NgFor, NgTemplateOutlet, RouterLinkActive, RouterLink, AngularSvgIconModule],
})
export class NavbarMobileSubmenuComponent implements OnInit {
  @Input() public submenu = <SubMenuItem>{};

  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleMenu(menu: any) {
    this.menuService.toggleSubMenu(menu);
  }

  private collapse(items: Array<any>) {
    items.forEach((item) => {
      item.expanded = false;
      if (item.children) this.collapse(item.children);
    });
  }

  public closeMobileMenu() {
    this.menuService.showMobileMenu = false;
  }
}
<div
  class="max-h-0 overflow-hidden pt-1 transition-all duration-500 ltr:pl-2.5 rtl:pr-2.5"
  [ngClass]="{ 'max-h-screen': submenu.expanded }">
  <ul
    class="border-border text-muted-foreground flex flex-col border-dashed ltr:border-l ltr:pl-2 rtl:border-r rtl:pr-2">
    <li *ngFor="let sub of submenu.children">
      <div class="text-muted-foreground hover:text-primary relative flex rounded-sm" (click)="toggleMenu(sub)">
        <!-- Condition -->
        <ng-container
          [ngTemplateOutlet]="sub.children ? childMenu : parentMenu"
          [ngTemplateOutletContext]="{ sub: sub }">
        </ng-container>

        <!-- Parent Menu -->
        <ng-template #parentMenu let-sub="sub">
          <a
            (click)="closeMobileMenu()"
            [routerLink]="sub.route"
            routerLinkActive="text-primary"
            [routerLinkActiveOptions]="{ exact: true }"
            class="hover:bg-card inline-block w-full px-4 py-2 text-xs">
            {{ sub.label }}
          </a>
          @if(menuService.isActive(sub.route)){
          <span
            class="size-1.5 bg-primary absolute flex translate-y-3.5 items-center rounded-full ltr:-translate-x-[11.5px] rtl:translate-x-[11.5px]">
          </span>
          }
        </ng-template>

        <!-- Child Menu -->
        <ng-template #childMenu let-sub="sub">
          <a class="inline-block w-full cursor-pointer px-4 py-2 text-xs">
            {{ sub.label }}
          </a>
          <button class="text-foreground/50 flex cursor-pointer items-center justify-end transition-all duration-500">
            @if(!sub.expanded){
            <svg-icon src="assets/icons/heroicons/outline/plus.svg" svgClass="h-4 w-4"> </svg-icon>
            }@else {
            <svg-icon src="assets/icons/heroicons/outline/minus.svg" svgClass="h-4 w-4"> </svg-icon>
            }
          </button>
        </ng-template>
      </div>
      <!-- Submenu items -->
      @if(sub.children?.length){
      <app-navbar-mobile-submenu [submenu]="sub"></app-navbar-mobile-submenu>
      }
    </li>
  </ul>
</div>
import { NgClass, NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { SubMenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from 'src/app/modules/layout/services/menu.service';
import { NavbarMobileSubmenuComponent } from '../navbar-mobile-submenu/navbar-mobile-submenu.component';

@Component({
  selector: 'app-navbar-mobile-menu',
  templateUrl: './navbar-mobile-menu.component.html',
  styleUrls: ['./navbar-mobile-menu.component.css'],
  imports: [
    NgFor,
    NgClass,
    AngularSvgIconModule,
    NgTemplateOutlet,
    RouterLink,
    RouterLinkActive,
    NgIf,
    NavbarMobileSubmenuComponent,
  ],
})
export class NavbarMobileMenuComponent implements OnInit {
  constructor(public menuService: MenuService) {}

  public toggleMenu(subMenu: SubMenuItem) {
    this.menuService.toggleMenu(subMenu);
  }

  public closeMenu() {
    this.menuService.showMobileMenu = false;
  }

  ngOnInit(): void {}
}
<div class="pt-4" *ngFor="let menu of menuService.pagesMenu">
  <div class="mx-1 mb-2 flex items-center justify-between">
    <small class="text-muted-foreground/50 text-xs font-semibold">
      {{ menu.group }}
    </small>
  </div>
  <ul class="flex flex-col">
    <!-- List items -->
    <li *ngFor="let item of menu.items">
      <!-- Menu List -->
      <div
        (click)="toggleMenu(item)"
        class="text-muted-foreground hover:text-foreground group flex grow items-center gap-4">
        <!-- Icon -->
        <div [ngClass]="item.active && !menuService.showSideBar ? 'text-primary' : 'text-muted-foreground/50'">
          <svg-icon src="{{ item.icon }}" [svgClass]="'h-5 w-5'"> </svg-icon>
        </div>

        <!-- Condition -->
        <ng-container
          [ngTemplateOutlet]="item.children ? childMenu : parentMenu"
          [ngTemplateOutletContext]="{ item: item }">
        </ng-container>

        <!-- Workaround:: Enable routerLink -->
        <ng-template #parentMenu let-item="item">
          <div
            routerLink="{{ item.route }}"
            class="text-muted-foreground hover:text-primary flex h-[36px] cursor-pointer items-center justify-start rounded-sm">
            <a
              routerLinkActive="text-primary"
              class="truncate text-xs font-semibold tracking-wide focus:outline-hidden">
              {{ item.label }}
            </a>
          </div>
        </ng-template>

        <!-- Workaround:: Disable routerLink -->
        <ng-template #childMenu let-item="item">
          <div class="flex h-9 grow cursor-pointer items-center justify-start rounded-sm">
            <a
              class="text-muted-foreground group-hover:text-primary truncate text-xs font-semibold tracking-wide focus:outline-hidden">
              {{ item.label }}
            </a>
          </div>
        </ng-template>

        <!-- Arrow Icon -->
        <button
          *ngIf="item.children"
          [ngClass]="{ hidden: !menuService.showSideBar }"
          class="text-foreground/50 flex cursor-pointer items-center justify-end p-0 transition-all duration-500 ltr:right-0 rtl:left-0">
          @if(!item.expanded){
          <svg-icon src="assets/icons/heroicons/outline/plus.svg" svgClass="h-4 w-4"> </svg-icon>
          }@else {
          <svg-icon src="assets/icons/heroicons/outline/minus.svg" svgClass="h-4 w-4"> </svg-icon>
          }
        </button>
      </div>

      <!-- Submenu items -->
      <app-navbar-mobile-submenu [submenu]="item"></app-navbar-mobile-submenu>
    </li>
  </ul>
</div>

import { NgClass, NgFor } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { MenuItem } from 'src/app/core/models/menu.model';
import { MenuService } from '../../../services/menu.service';
import { NavbarSubmenuComponent } from '../navbar-submenu/navbar-submenu.component';

@Component({
  selector: 'app-navbar-menu',
  templateUrl: './navbar-menu.component.html',
  styleUrls: ['./navbar-menu.component.css'],
  imports: [NgFor, NgClass, NavbarSubmenuComponent],
})
export class NavbarMenuComponent implements OnInit {
  private showMenuClass = ['scale-100', 'animate-fade-in-up', 'opacity-100', 'pointer-events-auto'];
  private hideMenuClass = ['scale-95', 'animate-fade-out-down', 'opacity-0', 'pointer-events-none'];

  constructor(public menuService: MenuService) {}

  ngOnInit(): void {}

  public toggleMenu(menu: MenuItem): void {
    menu.selected = !menu.selected;
  }

  public mouseEnter(event: any): void {
    let element = event.target.querySelector('app-navbar-submenu').children[0];
    if (element) {
      this.hideMenuClass.forEach((c) => element.classList.remove(c));
      this.showMenuClass.forEach((c) => element.classList.add(c));
    }
  }

  public mouseLeave(event: any): void {
    let element = event.target.querySelector('app-navbar-submenu').children[0];
    if (element) {
      this.showMenuClass.forEach((c) => element.classList.remove(c));
      this.hideMenuClass.forEach((c) => element.classList.add(c));
    }
  }
}
<div class="dropdown relative inline-block" *ngFor="let menu of menuService.pagesMenu">
  <!-- Button -->
  <button
    [ngClass]="
      menu.selected || menu.active
        ? 'bg-primary text-primary-foreground'
        : 'text-muted-foreground/50 hover:bg-card hover:text-muted-foreground '
    "
    class="mr-2 inline-flex rounded-md px-3 py-2 text-sm font-medium">
    <span>{{ menu.group }}</span>
  </button>
  <!-- Dropdown  -->
  <div
    class="dropdown-content absolute top-[100%] min-w-[200px] origin-top-left z-10"
    navbar-submenu
    [submenu]="menu.items"></div>
</div>

My current directory and style setup. 

franciscoostolaza@Mac proto-poros-admin-dashboard % ls -R src/
app             assets          index.html      main.ts         styles.scss

src/app:
app.config.ts   app.html        app.routes.ts   app.scss        app.spec.ts     app.ts          core            features        layouts         shared

src/app/core:
guards          services

src/app/core/guards:
auth.guards.ts

src/app/core/services:
layout.service.ts

src/app/features:
analytics       auth            calendar        contacts        dashboard       messages        profile         schedule        settings        timesheet

src/app/features/analytics:
analytics.html  analytics.scss  analytics.ts

src/app/features/auth:
auth.html       auth.scss       auth.spec.ts    auth.ts         sign-in

src/app/features/auth/sign-in:
sign-in.html    sign-in.ts

src/app/features/calendar:
calendar.html   calendar.scss   calendar.ts

src/app/features/contacts:
contacts.html   contacts.scss   contacts.ts

src/app/features/dashboard:
dashboard.html  dashboard.scss  dashboard.ts

src/app/features/messages:
messages.html   messages.scss   messages.ts

src/app/features/profile:
profile.html    profile.scss    profile.ts

src/app/features/schedule:
schedule.html   schedule.scss   schedule.ts

src/app/features/settings:
settings.html   settings.scss   settings.ts

src/app/features/timesheet:
timesheet.html  timesheet.scss  timesheet.ts

src/app/layouts:
header          main-layout     sidebar

src/app/layouts/header:
header.html     header.scss     header.ts

src/app/layouts/main-layout:
main-layout.html        main-layout.scss        main-layout.ts

src/app/layouts/sidebar:
sidebar.html    sidebar.scss    sidebar.spec.ts sidebar.ts

src/app/shared:
footer                  storage.service.ts

src/app/shared/footer:
footer.html     footer.scss     footer.spec.ts  footer.ts

src/assets:
icons   profile

src/assets/icons:
activity.svg            bar-chart-2.svg         clock.svg               home.svg                settings.svg            users.svg
arrow-down.svg          calendar.svg            grid.svg                message-square.svg      user.svg

src/assets/profile:
alexander-hipp.jpg      jimmy-fermin.jpg        jurica-koletic.jpg
franciscoostolaza@Mac proto-poros-admin-dashboard % 

<!-- src/app/layouts/header/header.html -->
 
<!-- <header class="bg-white dark:bg-gray-800 p-4 flex justify-between items-center shadow-md text-gray-900 dark:text-gray-100">
  <h1 class="text-2xl font-bold text-indigo-500 dark:text-indigo-300 cursor-pointer" (click)="layout.toggleSidebar()">Proto-Poros Dashboard</h1>
  <nav>
    <div class="relative" tabindex="0">
      <img src="user-icon.png" alt="User profile" class="w-8 h-8 rounded-full cursor-pointer">
      <ul class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 shadow-lg rounded hidden group-focus:block">
        <li><a class="block px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-700 focus:bg-gray-200 dark:focus:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" tabindex="0">Profile</a></li>
        <li><a routerLink="/settings" class="block px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-700 focus:bg-gray-200 dark:focus:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" tabindex="0">Settings</a></li>
        <li><button class="block w-full text-left px-4 py-2 hover:bg-gray-200 dark:hover:bg-gray-700 focus:bg-gray-200 dark:focus:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Logout" tabindex="0">Logout</button></li>
      </ul>
    </div>
  </nav>
</header> -->

<header class="bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-10 flex items-center justify-between px-6 py-4">
  <h1 class="text-xl font-semibold text-gray-900 dark:text-gray-100 cursor-pointer" (click)="toggleSidebar()">Proto-Admin</h1>
  <div class="relative">
    <button (click)="toggleDropdown()" class="flex items-center space-x-2 focus:outline-none">
      <img
        [ngSrc]="profileImgPath"
        class="h-10 w-10 rounded-full"
        alt="User profile"
        width="40"
        height="40"
      />
    </button>
    @if (isDropdownOpen()) {
      <div class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg py-2 z-20">
        <a routerLink="/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-blue-50 dark:hover:bg-blue-900">Profile</a>
        <a routerLink="/settings" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-blue-50 dark:hover:bg-blue-900">Settings</a>
      </div>
    }
  </div>
</header>





// import { Component, inject } from '@angular/core';
// import { LayoutService } from '../../core/services/layout.service';
// import { ChangeDetectionStrategy } from '@angular/core';

// @Component({
//   selector: 'app-header',
//   standalone: true,
//   templateUrl: './header.html',
//   styleUrl: './header.scss',
//   changeDetection: ChangeDetectionStrategy.OnPush,
// })
// export class Header {
//   layout = inject(LayoutService);
// }


import { Component, signal, inject, ChangeDetectionStrategy } from '@angular/core';
import { RouterLink } from '@angular/router';
import { NgOptimizedImage } from '@angular/common';
import { LayoutService } from '../../core/services/layout.service';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [RouterLink, NgOptimizedImage],
  templateUrl: './header.html',
  styleUrl: './header.scss',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class Header {
  layout = inject(LayoutService);
  isDropdownOpen = signal(false);
  profileImgPath = 'assets/profile/jurica-koletic.jpg';

  toggleDropdown() {
    this.isDropdownOpen.update(open => !open);
  }

  toggleSidebar() {
    this.layout.toggleSidebar();
  }
}
<!-- <app-header></app-header>
<div class="flex">
  <app-sidebar></app-sidebar>
  <main class="flex-1 p-4">
    <router-outlet></router-outlet>
  </main>
</div>
<app-footer></app-footer>

 -->

<div class="flex min-h-screen bg-gray-100 dark:bg-gray-900">
  <app-sidebar></app-sidebar>
  <div class="flex-1 transition-all duration-300 ease-in-out"
    [class.ml-64]="!layout.sidebarCollapsed()"
    [class.ml-16]="layout.sidebarCollapsed()">
    <app-header></app-header>
    <main class="p-6">
      <p class="text-gray-500 dark:text-gray-400">Main Layout</p>
      <router-outlet></router-outlet>
    </main>
    <app-footer></app-footer>
  </div>
</div>

// import { Component } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { RouterOutlet } from '@angular/router';
// import { Header } from '../header/header';
// import { Sidebar } from '../sidebar/sidebar';
// import { Footer } from '../../shared/footer/footer';

// @Component({
//   selector: 'app-main-layout',
//   standalone: true,
//   imports: [CommonModule, RouterOutlet, Header, Sidebar, Footer],
//   templateUrl: './main-layout.html',
//   styleUrl: './main-layout.scss'
// })
// export class MainLayout {}


import { Component, inject, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterOutlet } from '@angular/router';
import { Header } from '../header/header';
import { Sidebar } from '../sidebar/sidebar';
import { Footer } from '../../shared/footer/footer';
import { LayoutService } from '../../core/services/layout.service';

@Component({
  selector: 'app-main-layout',
  standalone: true,
  imports: [CommonModule, RouterOutlet, Header, Sidebar, Footer],
  templateUrl: './main-layout.html',
  styleUrl: './main-layout.scss',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class MainLayout {
  layout = inject(LayoutService);
}

<!-- <aside class="fixed h-full bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4 transition-width duration-300 ease-in-out" [class]="{'w-16': layout.sidebarCollapsed(), 'w-64': !layout.sidebarCollapsed()}" role="navigation">
  <nav>
    <button (click)="layout.toggleSidebar()" class="mb-4 px-4 py-2 bg-blue-500 dark:bg-blue-300 rounded hover:bg-blue-700 dark:hover:bg-blue-500 text-white focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Toggle sidebar">Toggle</button>
    <ul>
      <li><a routerLink="/dashboard" class="block py-2 hover:bg-gray-200 dark:hover:bg-gray-700 focus:bg-gray-200 dark:focus:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" tabindex="0">Dashboard</a></li>
      <li><a routerLink="/settings" class="block py-2 hover:bg-gray-200 dark:hover:bg-gray-700 focus:bg-gray-200 dark:focus:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500" tabindex="0">Settings</a></li>
    </ul>
  </nav>
</aside> -->

<aside class="bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 fixed h-screen p-4 shadow-md transition-all duration-300 ease-in-out md:block hidden"
  [class.w-64]="!layout.sidebarCollapsed()"
  [class.w-16]="layout.sidebarCollapsed()">
  <nav>
    <ul class="space-y-2">
      @for (link of navLinks; track link.path) {
        <li>
          <a
            [routerLink]="link.path"
            routerLinkActive="bg-blue-50 dark:bg-blue-900 text-blue-500 dark:text-blue-300"
            class="flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-md hover:bg-blue-50 dark:hover:bg-blue-900 overflow-hidden"
          >
            <svg-icon [src]="link.icon" class="w-5 h-5 flex-shrink-0"></svg-icon>
            @if (!layout.sidebarCollapsed()) {
              <span class="whitespace-nowrap">{{ link.label }}</span>
            }
          </a>
        </li>
      }
    </ul>
  </nav>
</aside>



// import { Component, inject } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { RouterLink } from '@angular/router';
// import { LayoutService } from '../../core/services/layout.service';

// @Component({
//   selector: 'app-sidebar',
//   standalone: true,
//   imports: [CommonModule, RouterLink],
//   templateUrl: './sidebar.html',
//   styleUrl: './sidebar.scss'
// })
// export class Sidebar {
//   layout = inject(LayoutService);
// }

import { Component, inject, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { LayoutService } from '../../core/services/layout.service';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  imports: [CommonModule, RouterLink, RouterLinkActive, AngularSvgIconModule],
  templateUrl: './sidebar.html',
  styleUrl: './sidebar.scss',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class Sidebar {
  layout = inject(LayoutService);
  navLinks = [
    { path: '/dashboard', label: 'Dashboard', icon: 'assets/icons/dashboard.svg' },
    { path: '/messages', label: 'Messages', icon: 'assets/icons/messages.svg' },
    { path: '/profile', label: 'Profile', icon: 'assets/icons/profile.svg' },
    { path: '/settings', label: 'Settings', icon: 'assets/icons/settings.svg' },
    { path: '/analytics', label: 'Analytics', icon: 'assets/icons/analytics.svg' },
    { path: '/timesheet', label: 'Timesheet', icon: 'assets/icons/timesheet.svg' },
    { path: '/schedule', label: 'Schedule', icon: 'assets/icons/schedule.svg' },
    { path: '/calendar', label: 'Calendar', icon: 'assets/icons/calendar.svg' },
    { path: '/contacts', label: 'Contacts', icon: 'assets/icons/contacts.svg' },
  ];
}
Lets compare Angular Tailwind directory with My current directory and use the featuers in Angular Tailwind directory to be implemented into 
My current directory. Use the tailwind style and features from Angular Tailwind directory.
ASk clarifying questions.

